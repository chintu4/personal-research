# This workflow will build and push a Docker container to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-custom-container?tabs=dotnet&pivots=container-linux
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Create a GitHub Personal access token with "repo" and "read:packages" permissions.
#
# 4. Create three app settings on your Azure Web app:
#       DOCKER_REGISTRY_SERVER_URL: Set this to "https://ghcr.io"
#       DOCKER_REGISTRY_SERVER_USERNAME: Set this to the GitHub username or organization that owns the repository
#       DOCKER_REGISTRY_SERVER_PASSWORD: Set this to the value of your PAT token from the previous step
#
# 5. Change the value for the AZURE_WEBAPP_NAME.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

name: Build and deploy a container to an Azure Web App

env:
  AZURE_WEBAPP_NAME: aiproject03691-linux

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Prefer a PAT with write:packages when org policy blocks GITHUB_TOKEN from creating packages
      - name: Log in to GHCR (via PAT)
        if: ${{ env.GHCR_PAT != '' }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ env.GHCR_PAT }}

      - name: Log in to GHCR (via GITHUB_TOKEN)
        if: ${{ env.GHCR_PAT == '' }}
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Lowercase the repo owner/repo
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Build and push container image to registry
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          push: true
          tags: ghcr.io/${{ env.REPO }}:${{ github.sha }}
          file: ./Dockerfile

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    env:
      GHCR_PAT: ${{ secrets.GHCR_PAT }}

    steps:
      - name: Lowercase the repo name and username
        run: echo "REPO=${GITHUB_REPOSITORY,,}" >>${GITHUB_ENV}

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Verify Linux Web App and set required app settings
        uses: azure/cli@v2
        env:
          GHCR_USERNAME: ${{ github.repository_owner }}
        with:
          inlineScript: |
            set -e
            # Discover resource group
            RG=$(az webapp show -n "$AZURE_WEBAPP_NAME" --query resourceGroup -o tsv)
            if [ -z "$RG" ]; then
              echo "Could not find resource group for app $AZURE_WEBAPP_NAME" >&2
              exit 1
            fi
            # Ensure app is Linux (containers require Linux App Service)
            KIND=$(az webapp show -g "$RG" -n "$AZURE_WEBAPP_NAME" --query kind -o tsv)
            echo "Detected Web App kind: $KIND in RG: $RG"
            case "$KIND" in
              *linux*) echo "Linux Web App detected." ;;
              *) echo "This Web App is not Linux. Create a Linux Web App for container images and set env.AZURE_WEBAPP_NAME to it." >&2; exit 1 ;;
            esac
            # Set container port expected by Azure
            az webapp config appsettings set -g "$RG" -n "$AZURE_WEBAPP_NAME" --settings WEBSITES_PORT=8000 1>/dev/null
            echo "Set WEBSITES_PORT=8000"
            # Optionally configure GHCR pull credentials if PAT is available
            if [ -n "$GHCR_PAT" ]; then
              az webapp config appsettings set -g "$RG" -n "$AZURE_WEBAPP_NAME" --settings \
                DOCKER_REGISTRY_SERVER_URL=https://ghcr.io \
                DOCKER_REGISTRY_SERVER_USERNAME="$GHCR_USERNAME" \
                DOCKER_REGISTRY_SERVER_PASSWORD="$GHCR_PAT" 1>/dev/null
              echo "Configured GHCR registry settings on the Web App"
            else
              echo "GHCR_PAT not provided in repo secrets; ensure the image is public or set registry settings manually."
            fi

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          images: 'ghcr.io/${{ env.REPO }}:${{ github.sha }}'
